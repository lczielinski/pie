#lang pie

(claim +
  (-> Nat Nat Nat))
(claim step-+
  (-> Nat Nat))
(define step-+
  (λ (c)
    (add1 c)))
(define +
  (λ (a b)
    (iter-Nat a
      b
      step-+)))

(claim length
  (Pi ((E U))
    (-> (List E)
      Nat)))
(claim step-length
  (Pi ((E U))
    (-> E (List E) Nat Nat)))
(define step-length
  (λ (E e es l)
    (add1 l)))
(define length
  (λ (E l)
    (rec-List l
      0
      (step-length E))))

(claim list->vec
  (∏ ((E U) (es (List E)))
    (Vec E (length E es))))
(claim mot-list->vec
  (∏ ((E U))
    (-> (List E)
        U)))
(define mot-list->vec
  (λ (E)
    (λ (es)
      (Vec E (length E es)))))
(claim step-list->vec
  (∏ ((E U) (e E) (es (List E)))
    (-> (mot-list->vec E es)
        (mot-list->vec E (:: e es)))))
(define step-list->vec
  (λ (E e es)
    (λ (list->vec_es)
      (vec:: e list->vec_es))))
(define list->vec
  (λ (E es)
      (ind-List es
        (mot-list->vec E)
        vecnil
        (step-list->vec E))))

(claim vec-append
  (∏ ((E U) (l Nat) (j Nat))
    (-> (Vec E l) (Vec E j)
        (Vec E (+ l j)))))
(claim mot-vec-append
  (∏ ((E U) (j Nat) (k Nat))
    (-> (Vec E k)
        U)))
(define mot-vec-append
  (λ (E j k)
    (λ (es)
      (Vec E (+ k j)))))
(claim step-vec-append
  (∏ ((E U) (j Nat) (k Nat) (e E) (es (Vec E k)))
    (-> (mot-vec-append E j k es)
        (mot-vec-append E j (add1 k) (vec:: e es)))))
(define step-vec-append
  (λ (E j l-1 e es)
    (λ (vec-append_es)
      (vec:: e vec-append_es))))
(define vec-append
  (λ (E l j)
    (λ (es end)
      (ind-Vec l es
        (mot-vec-append E j)
        end
        (step-vec-append E j)))))

(claim vec->list
  (∏ ((E U) (l Nat))
    (-> (Vec E l)
        (List E))))
(claim mot-vec->list
  (∏ ((E U) (l Nat))
    (-> (Vec E l)
        U)))
(define mot-vec->list
  (λ (E l)
    (λ (es)
      (List E))))
(claim step-vec->list
  (∏ ((E U) (l-1 Nat) (e E) (es (Vec E l-1)))
    (-> (mot-vec->list E l-1 es)
        (mot-vec->list E (add1 l-1) (vec:: e es)))))
(define step-vec->list
  (λ (E l-1 e es)
    (λ (vec->list_es)
      (:: e vec->list_es))))
(define vec->list
  (λ (E l)
    (λ (es)
      (ind-Vec l es
        (mot-vec->list E)
        nil
        (step-vec->list E)))))

(claim list->vec->list=
  (∏ ((E U) (es (List E)))
    (= (List E)
       es
       (vec->list E
         (length E es)
         (list->vec E es)))))
(claim mot-list->vec->list=
  (∏ ((E U))
    (-> (List E)
        U)))
(define mot-list->vec->list=
  (λ (E es)
    (= (List E)
      es
      (vec->list E
        (length E es)
        (list->vec E es)))))
(claim step-list->vec->list=
  (∏ ((E U) (e E) (es (List E)))
    (-> (mot-list->vec->list= E es)
        (mot-list->vec->list= E (:: e es)))))
(define step-list->vec->list=
  (λ (E e es)
    (λ (list->vec->list=_es)
      (cong list->vec->list=_es
        (the (-> (List E) (List E))
          (λ (list) (:: e list)))))))
(define list->vec->list=
  (λ (E es)
    (ind-List es
      (mot-list->vec->list= E)
      (same nil)
      (step-list->vec->list= E))))