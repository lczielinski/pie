#lang pie

(claim step-+ (-> Nat Nat))
(define step-+ (λ (x) (add1 x)))

(claim + (-> Nat Nat Nat))
(define +
  (λ (m n)
    (iter-Nat m
      n
      step-+)))

(claim flip (∏ ((A U)
                (D U))
              (-> (Pair A D)
                  (Pair D A))))
(define flip (λ (A D)
               (λ (p)
                 (cons (cdr p) (car p)))))

(claim elim-Pair
  (∏ ((A U) (D U) (X U))
    (-> (Pair A D)
        (-> A D
            X)
       X)))
(define elim-Pair
  (λ (A D X)
    (λ (p f)
      (f (car p) (cdr p)))))

(claim kar (-> (Pair Nat Nat) Nat))
(define kar
  (λ (p)
    (elim-Pair
      Nat Nat Nat
      p
      (λ (a d)
        a))))

(claim kdr (-> (Pair Nat Nat) Nat))
(define kdr
  (λ (p)
    (elim-Pair
      Nat Nat Nat
      p
      (λ (a d)
        d))))

(claim swap (-> (Pair Nat Atom) (Pair Atom Nat)))
(define swap
  (λ (p)
    (elim-Pair
      Nat Atom (Pair Atom Nat)
      p
      (λ (a d)
        (cons d a)))))

(claim twin
  (∏ ((Y U))
    (-> Y
        (Pair Y Y))))
(define twin
  (λ (Y)
    (λ (x)
      (cons x x))))

(claim compose
  (∏ ((A U)
      (B U)
      (C U))
    (-> (-> B C) (-> A B)
        (-> A C))))
(define compose
  (λ (A B C)
    (λ (f g x)
      (f (g x)))))

(claim twice
  (-> Nat Nat))
(define twice
  (λ (m)
    (+ m m)))
(claim eight-the-hard-way Nat)
(define eight-the-hard-way
  (compose Nat Nat Nat twice twice 2))

(claim decurry
  (∏ ((A U)
      (B U)
      (C U))
    (-> (-> A B C)
        (-> (Pair A B) C))))
(define decurry
  (λ (A B C)
    (λ (f)
      (λ (p)
        (f (car p) (cdr p))))))

(claim c+ (-> (Pair Nat Nat) Nat))
(define c+ (decurry Nat Nat Nat +))
(claim six-the-hard-way Nat)
(define six-the-hard-way (c+ (cons 3 3)))