#lang pie

(claim step-+ (-> Nat Nat))
(define step-+ (λ (x) (add1 x)))

(claim + (-> Nat Nat Nat))
(define +
  (λ (m n)
    (iter-Nat m
      n
      step-+)))

#| (claim step-zerop (-> Nat Atom Atom))
(define step-zerop (λ (n-1 zerop_n-1) 'nil))

(claim zerop (-> Nat Atom))
(define zerop (λ (n) (rec-Nat n 't step-zerop))) |#

(claim step-zerop
  (-> Nat
    Atom))
(define step-zerop
  (λ (n-1)
    'nil))

(claim zerop
  (-> Nat
    Atom))
(define zerop
  (λ (n)
    (which-Nat n
      't
      step-zerop)))

(claim step-gauss (-> Nat Nat Nat))
(define step-gauss (λ (n-1 gauss_n-1)
                     (+ (add1 n-1) gauss_n-1)))

(claim gauss (-> Nat Nat))
(define gauss (λ (n) (rec-Nat n 0 step-gauss)))

(claim make-step-* (-> Nat (-> Nat Nat Nat)))
(define make-step-* (λ (j) (λ (n-1 *_n-1)
                             (+ j *_n-1))))

#| (claim step-* (-> Nat Nat Nat Nat))
(define step-* (λ (j n-1 *_n-1) (+ j *_n-1)))

(claim * (-> Nat Nat Nat))
(define * (λ (n j) (rec-Nat n 0 (step-* j)))) |#

(claim step-*
  (-> Nat Nat
      Nat))
(define step-*
  (λ (j *_n-1)
    (+ j *_n-1)))

(claim *
  (-> Nat Nat
    Nat))
(define *
  (λ (n j)
    (iter-Nat n
      0
      (step-* j))))