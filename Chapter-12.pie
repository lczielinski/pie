#lang pie

(claim step-+ (-> Nat Nat))
(define step-+ (λ (x) (add1 x)))

(claim + (-> Nat Nat Nat))
(define +
  (λ (m n)
    (iter-Nat m
      n
      step-+)))

(claim double
  (-> Nat
      Nat))
(define double
  (λ (n)
    (iter-Nat n
      0
      (+ 2))))

(claim Even
  (-> Nat
      U))
(define Even
  (λ (n)
    (Sigma ((half Nat))
      (= Nat n (double half)))))

(claim zero-is-even
  (Even 0))
(define zero-is-even
  (cons 0
    (same 0)))

(claim +two-even
  (∏ ((n Nat))
    (-> (Even n)
        (Even (+ 2 n)))))
(define +two-even
  (λ (n en)
    (cons (add1 (car en))
      (cong (cdr en) (+ 2)))))

(claim two-is-even
  (Even 2))
(define two-is-even
  (+two-even 0 zero-is-even))

(claim Odd
  (-> Nat
      U))
(define Odd
  (λ (n)
    (Sigma ((haf Nat))
      (= Nat n (add1 (double haf))))))

(claim one-is-odd
  (Odd 1))
(define one-is-odd
  (cons 0
    (same 1)))
(claim thirteen-is-odd
  (Odd 13))
(define thirteen-is-odd
  (cons 6
    (same 13)))

(claim add1-even->odd
  (∏ ((n Nat))
    (-> (Even n)
        (Odd (add1 n)))))
(define add1-even->odd
  (λ (n en)
    (cons (car en)
      (cong (cdr en) (+ 1)))))

(claim add1-odd->even
  (∏ ((n Nat))
    (-> (Odd n)
        (Even (add1 n)))))
(define add1-odd->even
  (λ (n on)
    (cons (add1 (car on))
      (cong (cdr on) (+ 1)))))