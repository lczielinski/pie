#lang pie

(claim peas
  (∏ ((how-many-peas Nat))
    (Vec Atom how-many-peas)))
(claim mot-peas
  (-> Nat
      U))
(define mot-peas
  (λ (k)
    (Vec Atom k)))
(claim step-peas
  (∏ ((l-1 Nat))
    (-> (mot-peas l-1)
        (mot-peas (add1 l-1)))))
(define step-peas
  (λ (l-1)
    (λ (peas_l-1)
      (vec:: 'pea peas_l-1))))
(define peas
  (λ (how-many-peas)
    (ind-Nat how-many-peas
      mot-peas
      vecnil
      step-peas)))

(claim last
  (∏ ((E U) (l Nat))
    (-> (Vec E (add1 l))
        E)))
(claim base-last
  (∏ ((E U))
    (-> (Vec E (add1 zero))
        E)))
(define base-last
  (λ (E)
    (λ (es)
      (head es))))
(claim mot-last
  (-> U Nat
      U))
(define mot-last
  (λ (E k)
    (-> (Vec E (add1 k))
        E)))
(claim step-last
  (∏ ((E U)
      (l-1 Nat))
    (-> (mot-last E l-1)
        (mot-last E (add1 l-1)))))
(define step-last
  (λ (E l-1)
    (λ (last_l-1)
      (λ (es)
        (last_l-1 (tail es))))))
(define last
  (λ (E l)
    (ind-Nat l
      (mot-last E)
      (base-last E)
      (step-last E))))

(claim drop-last
  (∏ ((E U) (l Nat))
    (-> (Vec E (add1 l))
        (Vec E l))))
(claim base-drop-last
  (∏ ((E U))
    (-> (Vec E (add1 zero))
        (Vec E zero))))
(define base-drop-last
  (λ (E)
    (λ (es)
      vecnil)))
(claim mot-drop-last
  (-> U Nat
      U))
(define mot-drop-last
  (λ (E k)
    (-> (Vec E (add1 k))
        (Vec E k))))
(claim step-drop-last
  (∏ ((E U) (l-1 Nat))
    (-> (mot-drop-last E l-1)
        (mot-drop-last E (add1 l-1)))))
(define step-drop-last
  (λ (E l-1)
    (λ (drop-last_l-1)
      (λ (es)
        (vec:: (head es)
          (drop-last_l-1 (tail es)))))))
(define drop-last
  (λ (E l)
    (ind-Nat l
      (mot-drop-last E)
      (base-drop-last E)
      (step-drop-last E))))

(claim mot-count-down
  (-> Nat U))
(define mot-count-down
  (λ (k) (Vec Nat k)))
(claim base-count-down
  (mot-count-down 0))
(define base-count-down
  vecnil)
(claim step-count-down
  (∏ ((k Nat))
    (-> (mot-count-down k)
        (mot-count-down (add1 k)))))
(define step-count-down
  (λ (k vk)
    (vec:: k vk)))
(claim count-down
  (∏ ((n Nat))
    (Vec Nat n)))
(define count-down
  (λ (n)
    (ind-Nat n
      mot-count-down
      base-count-down
      step-count-down)))

(claim count-up
  (∏ ((n Nat))
    (Vec Nat n)))

