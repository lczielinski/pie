#lang pie

(claim Dec
  (-> U
      U))

(define Dec
  (λ (X)
    (Either X
      (-> X
          Absurd))))

(claim =consequence
  (-> Nat Nat
      U))
(define =consequence
  (λ (n j)
    (which-Nat n
      (which-Nat j
        Trivial
        (λ (j-1)
          Absurd))
      (λ (n-1)
        (which-Nat j
          Absurd
          (λ (j-1)
            (= Nat n-1 j-1)))))))

(claim =consequence-same
  (∏ ((n Nat))
    (=consequence n n)))
(define =consequence-same
  (λ (n)
    (ind-Nat n
      (λ (k)
        (=consequence k k))
      sole
      (λ (n-1 =consequence_n-1)
        (same n-1)))))

(claim use-Nat=
  (∏ ((n Nat) (j Nat))
    (-> (= Nat n j)
        (=consequence n j))))
(define use-Nat=
  (λ (n j)
    (λ (n=j)
      (replace n=j
        (λ (k)
          (=consequence n k))
        (=consequence-same n)))))

(claim zero-not-add1
  (∏ ((n Nat))
    (-> (= Nat zero (add1 n))
        Absurd)))
(define zero-not-add1
  (λ (n)
    (use-Nat= zero (add1 n))))

(claim add1-not-zero
  (∏ ((n Nat))
    (-> (= Nat (add1 n) zero)
        Absurd)))
(define add1-not-zero
  (λ (n)
    (use-Nat= (add1 n) zero)))

(claim sub1=
  (∏ ((n Nat) (j Nat))
    (-> (= Nat (add1 n) (add1 j))
        (= Nat n j))))
(define sub1=
  (λ (n j)
    (use-Nat= (add1 n) (add1 j))))

(claim zero?
  (∏ ((j Nat))
    (Dec
     (= Nat zero j))))
(define zero?
  (λ (j)
    (ind-Nat j
      (λ (k)
        (Dec (= Nat zero k)))
      (left (same zero))
      (λ (j-1 zero?_n-1)
        (right (zero-not-add1 j-1))))))

(claim dec-add1=
  (∏ ((n-1 Nat) (j-1 Nat))
    (-> (Dec (= Nat n-1 j-1))
        (Dec (= Nat (add1 n-1) (add1 j-1))))))
(define dec-add1=
  (λ (n-1 j-1 eq-or-not)
    (ind-Either eq-or-not
      (λ (target)
        (Dec (= Nat (add1 n-1) (add1 j-1))))
      (λ (yes)
        (left (cong yes (the (-> Nat Nat) (λ (k) (add1 k))))))
      (λ (no)
        (right (λ (n=j)
                 (no (sub1= n-1 j-1 n=j))))))))

(claim nat=?
  (∏ ((n Nat) (j Nat))
    (Dec (= Nat n j))))
(claim mot-nat=?
  (-> Nat
      U))
(define mot-nat=?
  (λ (k)
    (∏ ((j Nat))
      (Dec (= Nat k j)))))
(claim step-nat=?
  (∏ ((n-1 Nat))
    (-> (mot-nat=? n-1)
        (mot-nat=? (add1 n-1)))))
(define step-nat=?
  (λ (n-1 nat=?_n-1 j)
    (ind-Nat j
      (λ (k)
        (Dec (= Nat (add1 n-1) k)))
      (right (add1-not-zero n-1))
      (λ (j-1 nat=?_j-1)
        (dec-add1= n-1 j-1
          (nat=?_n-1 j-1))))))
(define nat=?
  (λ (n j)
    ((ind-Nat n
       mot-nat=?
       zero?
       step-nat=?)
      j)))